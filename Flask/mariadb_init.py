from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

def init_db(app):
    db.init_app(app)
    with app.app_context():
        db.create_all()
    return db

class packet_table(db.Model):
    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    source_ip = db.Column(db.String(15), nullable=False)
    source_port = db.Column(db.Integer, nullable=False)
    dest_ip = db.Column(db.String(15), nullable=False)
    dest_port = db.Column(db.Integer, nullable=False)
    protocol = db.Column(db.Double, nullable=False)
    timestamp = db.Column(db.Integer, nullable=False)
    flow_duration = db.Column(db.Double, nullable=False)
    total_fwd_packets = db.Column(db.Double, nullable=False)
    total_backward_packets = db.Column(db.Double, nullable=False)
    total_length_of_fwd_packets = db.Column(db.Double, nullable=False)
    total_length_of_bwd_packets	= db.Column(db.Double, nullable=False)	
    fwd_packet_length_max	= db.Column(db.Double, nullable=False)	
    fwd_packet_length_min	= db.Column(db.Double, nullable=False)	
    fwd_packet_length_mean	= db.Column(db.Double, nullable=False)	
    fwd_packet_length_std	= db.Column(db.Double, nullable=False)	
    bwd_packet_length_max	= db.Column(db.Double, nullable=False)	
    bwd_packet_length_min	= db.Column(db.Double, nullable=False)	
    bwd_packet_length_mean	= db.Column(db.Double, nullable=False)	
    bwd_packet_length_std	= db.Column(db.Double, nullable=False)	
    flow_bytes	= db.Column(db.Double, nullable=False)	
    flow_packets	= db.Column(db.Double, nullable=False)	
    flow_iat_mean	= db.Column(db.Double, nullable=False)	
    flow_iat_std	= db.Column(db.Double, nullable=False)	
    flow_iat_max	= db.Column(db.Double, nullable=False)	
    flow_iat_min	= db.Column(db.Double, nullable=False)	
    fwd_iat_total	= db.Column(db.Double, nullable=False)	
    fwd_iat_mean	= db.Column(db.Double, nullable=False)	
    fwd_iat_std	= db.Column(db.Double, nullable=False)	
    fwd_iat_max	= db.Column(db.Double, nullable=False)	
    fwd_iat_min	= db.Column(db.Double, nullable=False)	
    bwd_iat_total	= db.Column(db.Double, nullable=False)	
    bwd_iat_mean	= db.Column(db.Double, nullable=False)	
    bwd_iat_std	= db.Column(db.Double, nullable=False)	
    bwd_iat_max	= db.Column(db.Double, nullable=False)	
    bwd_iat_min	= db.Column(db.Double, nullable=False)	
    fwd_psh_flags	= db.Column(db.Double, nullable=False)	
    bwd_psh_flags	= db.Column(db.Double, nullable=False)	
    fwd_urg_flags	= db.Column(db.Double, nullable=False)	
    bwd_urg_flags	= db.Column(db.Double, nullable=False)	
    fwd_header_length	= db.Column(db.Double, nullable=False)	
    bwd_header_length	= db.Column(db.Double, nullable=False)	
    fwd_packets	= db.Column(db.Double, nullable=False)	
    bwd_packets	= db.Column(db.Double, nullable=False)	
    min_packet_length	= db.Column(db.Double, nullable=False)	
    max_packet_length	= db.Column(db.Double, nullable=False)	
    packet_length_mean	= db.Column(db.Double, nullable=False)	
    packet_length_std	= db.Column(db.Double, nullable=False)	
    packet_length_variance	= db.Column(db.Double, nullable=False)	
    fin_flag_count	= db.Column(db.Double, nullable=False)	
    syn_flag_count	= db.Column(db.Double, nullable=False)	
    rst_flag_count	= db.Column(db.Double, nullable=False)	
    psh_flag_count	= db.Column(db.Double, nullable=False)	
    ack_flag_count	= db.Column(db.Double, nullable=False)	
    urg_flag_count	= db.Column(db.Double, nullable=False)	
    cwe_flag_count	= db.Column(db.Double, nullable=False)	
    ece_flag_count	= db.Column(db.Double, nullable=False)	
    down_up_ratio	= db.Column(db.Double, nullable=False)	
    average_packet_size	= db.Column(db.Double, nullable=False)	
    avg_fwd_segment_size	= db.Column(db.Double, nullable=False)	
    avg_bwd_segment_size	= db.Column(db.Double, nullable=False)	
    fwd_avg_bytes_bulk	= db.Column(db.Double, nullable=False)	
    fwd_avg_packets_bulk	= db.Column(db.Double, nullable=False)	
    fwd_avg_bulk_rate	= db.Column(db.Double, nullable=False)	
    bwd_avg_bytes_bulk	= db.Column(db.Double, nullable=False)	
    bwd_avg_packets_bulk	= db.Column(db.Double, nullable=False)	
    bwd_avg_bulk_rate	= db.Column(db.Double, nullable=False)	
    subflow_fwd_packets	= db.Column(db.Double, nullable=False)	
    subflow_fwd_bytes	= db.Column(db.Double, nullable=False)	
    subflow_bwd_packets	= db.Column(db.Double, nullable=False)	
    subflow_bwd_bytes	= db.Column(db.Double, nullable=False)	
    init_win_bytes_forward	= db.Column(db.Double, nullable=False)	
    init_win_bytes_backward	= db.Column(db.Double, nullable=False)	
    act_data_pkt_fwd	= db.Column(db.Double, nullable=False)	
    min_seg_size_forward	= db.Column(db.Double, nullable=False)	
    active_mean	= db.Column(db.Double, nullable=False)	
    active_std	= db.Column(db.Double, nullable=False)	
    active_max	= db.Column(db.Double, nullable=False)	
    active_min	= db.Column(db.Double, nullable=False)	
    idle_mean	= db.Column(db.Double, nullable=False)	
    idle_std	= db.Column(db.Double, nullable=False)	
    idle_max	= db.Column(db.Double, nullable=False)	
    idle_min	= db.Column(db.Double, nullable=False)

class packet_detection_table(db.Model):
    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    detection = db.Column(db.String(100), nullable=False)
    type = db.Column(db.String(20), nullable=False)

class file_table(db.Model):
    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    ip = db.Column(db.String(15), nullable=False)
    file = db.Column(db.LargeBinary, nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False)

class file_detection_table(db.Model):
    idx = db.Column(db.Integer, primary_key=True, autoincrement=True) 
    detection = db.Column(db.String(100), nullable=False)
    type = db.Column(db.String(20), nullable=False)

class block_user_table(db.Model):
    ip = db.Column(db.String(15), primary_key=True)
    time = db.Column(db.DateTime, nullable=False)
    reason = db.Column(db.String(15), nullable=False)
    
class auth_table(db.Model):
    uuid = db.Column(db.String(36), primary_key=True)