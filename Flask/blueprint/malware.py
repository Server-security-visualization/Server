import re
import io
import datetime
import configparser
import numpy as np
import tensorflow as tf
from flask import Blueprint, request
from PIL import Image
from mariadb_init import file_table, file_detection_table, db

blue_malware = Blueprint("malware", __name__, url_prefix="/malware")

def DCAv1(lr=0.001):
    model = tf.keras.Sequential()
    model.add(tf.keras.layers.Conv2D(50, (5,5), 
                             activation='relu', padding='same',
                             input_shape=(256, 256, 1)))
    model.add(tf.keras.layers.MaxPooling2D((2,2)))

    model.add(tf.keras.layers.Conv2D(70, (3,3), 
                             activation='relu', padding='same',
                             input_shape=(64, 64, 50)))
    model.add(tf.keras.layers.MaxPooling2D((2,2)))

    model.add(tf.keras.layers.Conv2D(70, (3,3), 
                             activation='relu', padding='same',
                             input_shape=(32, 32, 70)))
    model.add(tf.keras.layers.MaxPooling2D((2,2)))

    model.add(tf.keras.layers.Flatten())
    model.add(tf.keras.layers.Dense(256, activation='relu'))
    model.add(tf.keras.layers.Dense(1, activation='sigmoid'))
    
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=lr), 
                  loss=tf.keras.losses.BinaryCrossentropy(), 
                  metrics=['accuracy'])
    return model

try:
    config = configparser.ConfigParser()
    config.read('/usr/src/app/config.ini')
    thresh = float(config['AI']['thresh'])
    
    epoch = 8
    checkpoint_path = f"./model/malware_model/model_{epoch}.ckpt"

    malware_model = DCAv1()
    malware_model.load_weights(checkpoint_path)
except:
    print("Malware Model Load ERROR!")
    exit(0)

def convert_mlw_to_img(binaryData, width=256, height=256):
    hex_array = np.frombuffer(binaryData, dtype=np.uint8)
    img = Image.fromarray(np.uint8(hex_array))
    img = img.resize((width, height), resample=Image.Resampling.BICUBIC)
    
    return img
    
def detection(img):
    img = tf.expand_dims(img,axis=0)
    prediction = float(malware_model.predict(img, verbose=0)[0][0])
    
    if(prediction > thresh):
        malware_type = "malware"
    else:
        malware_type = "normal"
    
    return prediction, malware_type

@blue_malware.route('/', methods=["POST"], strict_slashes=False)
def malware():
    if(request.method=="POST"):
        ip = request.form.get("ip","")
        file = request.files['file']
        
        ipv4 = "^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        
        if(re.match(ipv4, ip) and file):
            byte_file = file.read()
                    
            new_file = file_table(idx=None, ip=ip, filename=file.filename, file=byte_file, timestamp=datetime.datetime.now())
            db.session.add(new_file)
            db.session.commit()
            
            img = convert_mlw_to_img(byte_file, width=256, height=256)
            prediction, malware_type = detection(np.array(img)/255.)
            
            imgb = io.BytesIO()
            img.save(imgb, format='PNG')
            imgb = imgb.getvalue()
            
            new_file_detection = file_detection_table(idx=None, img=imgb, detection=prediction, type=malware_type, file_idx=new_file.idx)
            db.session.add(new_file_detection)
            db.session.commit()
                    
            return "success"
        else:
            return "form data error!"