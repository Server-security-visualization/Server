import re
import datetime
import numpy as np
import tensorflow as tf
from keras import optimizers
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from PIL import Image
from flask import Blueprint, request
from mariadb_init import file_table, file_detection_table, db

blue_malware = Blueprint("malware", __name__, url_prefix="/malware")

def create_model():
    model = tf.keras.Sequential()
    model.add(Conv2D(50, (5,5), 
                             activation='relu', padding='same',
                             input_shape=(128, 128, 1)))
    model.add(MaxPooling2D((2,2)))

    model.add(Conv2D(70, (3,3), 
                             activation='relu', padding='same',
                             input_shape=(64, 64, 50)))
    model.add(MaxPooling2D((2,2)))

    model.add(Conv2D(70, (3,3), 
                             activation='relu', padding='same',
                             input_shape=(32, 32, 70)))
    model.add(MaxPooling2D((2,2)))

    model.add(Flatten())
    model.add(Dense(256, activation='relu'))
    model.add(Dense(9, activation='softmax'))
    
    adam = optimizers.Adam(lr=0.0001)
    model.compile(optimizer=adam, loss='categorical_crossentropy', metrics=['accuracy'])
    
    return model

try:
    thresh = 0.5
    label = ["Ramnit", "Lollipop", "Kelihos_ver3", "Vundo", "Simda", "Tracur", "Kelihos_ver1", "Obfuscator.ACY", "Gatak"]
    
    epoch = 30
    checkpoint_path = f"./model/malware_cnn32/model_{epoch}.ckpt"

    malware_model = create_model()
    malware_model.load_weights(checkpoint_path)
except:
    print("Malware Model Load ERROR!")
    exit(0)

def createGreyScaleImageSpecificWith(binaryData):
    size = len(binaryData)
    if(size < 10240):
        width = 32
    elif(10240 <= size <=10240*3):
        width = 64
    elif(10240*3 <= size <=10240*6):
        width = 128
    elif(10240*6 <= size <=10240*10):
        width = 256
    elif(10240*10 <= size <=10240*20):
        width = 384
    elif(10240*20 <= size <=10240*50):
        width = 512
    elif(10240*50 <= size <=10240*100):
        width = 768
    else:
        width = 1024

    height = int(size/width)+1
    img = Image.new('L',(width,height))
    img.putdata(binaryData)
    img = img.resize((256,256))
    return np.array(img)
    
def detection(img):
    img = tf.expand_dims(img,axis=0)
    prediction = malware_model.predict(img, verbose=0)[0]
    
    max_idx = np.argmax(prediction)
    if(prediction[max_idx] > thresh):
        malware_type = label[max_idx]
    else:
        malware_type = "정상"
    
    prediction = [str(round(pred, 2)) for pred in prediction]
    prediction = ",".join(prediction)
    
    return prediction, malware_type

@blue_malware.route('/', methods=["POST"], strict_slashes=False)
def malware():
    if(request.method=="POST"):
        ip = request.form.get("ip","")
        file = request.files['file']
        
        ipv4 = "^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        
        if(re.match(ipv4, ip) and file):
            try:
                byte_file = file.read()
                    
                new_file = file_table(idx=None, ip=ip, file=byte_file, timestamp=datetime.datetime.now())
                db.session.add(new_file)
                db.session.commit()
                    
                img = createGreyScaleImageSpecificWith(byte_file)
                prediction, malware_type = detection(img)
                
                new_file_detection = file_detection_table(idx=None, detection=prediction, type=malware_type, file_idx=new_file.idx)
                db.session.add(new_file_detection)
                db.session.commit()
                    
                return "success"
            except:
                return "error"
        else:
            return "form data error!"