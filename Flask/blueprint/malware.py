import re
import datetime
import math
import numpy as np
import tensorflow as tf
from flask import Blueprint, request
from keras import optimizers
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from PIL import Image
from mariadb_init import file_table, file_detection_table, db

blue_malware = Blueprint("malware", __name__, url_prefix="/malware")

def Simple_CNN():
    model = tf.keras.Sequential()
    model.add(Conv2D(50, (5,5), 
                             activation='relu', padding='same',
                             input_shape=(128, 128, 1)))
    model.add(MaxPooling2D((2,2)))

    model.add(Conv2D(70, (3,3), 
                             activation='relu', padding='same',
                             input_shape=(64, 64, 50)))
    model.add(MaxPooling2D((2,2)))

    model.add(Conv2D(70, (3,3), 
                             activation='relu', padding='same',
                             input_shape=(32, 32, 70)))
    model.add(MaxPooling2D((2,2)))

    model.add(Flatten())
    model.add(Dense(256, activation='relu'))
    model.add(Dense(9, activation='softmax'))
    
    adam = optimizers.Adam(lr=0.0001)
    model.compile(optimizer=adam, loss='categorical_crossentropy', metrics=['accuracy'])
    
    return model

try:
    thresh = 0.5
    label = ["Ramnit", "Lollipop", "Kelihos_ver3", "Vundo", "Simda", "Tracur", "Kelihos_ver1", "Obfuscator.ACY", "Gatak"]
    
    epoch = 30
    checkpoint_path = f"./model/malware_model/model_{epoch}.ckpt"

    malware_model = Simple_CNN()
    malware_model.load_weights(checkpoint_path)
except:
    print("Malware Model Load ERROR!")
    exit(0)

def convert_mlw_to_img(binaryData, width=128, height=128):
    hex_array = np.frombuffer(binaryData, dtype=np.uint8)

    if(hex_array.size % 16 == 0):
        hex_array = hex_array.reshape(-1, 16)
    else:
        count = 16 - len(binaryData) % 16
        zero_np = np.zeros(count)
        hex_array = np.concatenate((hex_array, zero_np))
        hex_array =  hex_array.reshape(-1, 16)

    if hex_array.shape[1] != 16:
        assert (False)
    b = int((hex_array.shape[0] * 16) ** (0.5))
    b = 2 ** (int(math.log(b) / math.log(2)) + 1)
    a = int(hex_array.shape[0] * 16 / b)
    hex_array = hex_array[:a * b // 16, :]
    im = np.reshape(hex_array, (a, b))

    img = Image.fromarray(np.uint8(im))
    img = img.resize((width, height), resample=Image.ANTIALIAS)
    return np.array(img)/255.
    
def detection(img):
    img = tf.expand_dims(img,axis=0)
    prediction = malware_model.predict(img, verbose=0)[0]
    
    max_idx = np.argmax(prediction)
    if(prediction[max_idx] > thresh):
        malware_type = label[max_idx]
    else:
        malware_type = "정상"
    
    prediction = [str(round(pred, 2)) for pred in prediction]
    prediction = ",".join(prediction)
    
    return prediction, malware_type

@blue_malware.route('/', methods=["POST"], strict_slashes=False)
def malware():
    if(request.method=="POST"):
        ip = request.form.get("ip","")
        file = request.files['file']
        
        ipv4 = "^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        
        if(re.match(ipv4, ip) and file):
            byte_file = file.read()
                    
            new_file = file_table(idx=None, ip=ip, file=byte_file, timestamp=datetime.datetime.now())
            db.session.add(new_file)
            db.session.commit()
            
            img = convert_mlw_to_img(byte_file, width=128, height=128)
            prediction, malware_type = detection(img)
            
            new_file_detection = file_detection_table(idx=None, detection=prediction, type=malware_type, file_idx=new_file.idx)
            db.session.add(new_file_detection)
            db.session.commit()
                    
            return "success"
        else:
            return "form data error!"