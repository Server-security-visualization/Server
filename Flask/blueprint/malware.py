import re
import datetime
import numpy as np
import tensorflow as tf
from PIL import Image
from flask import Blueprint, request
from mariadb_init import file_table, file_detection_table, db

blue_malware = Blueprint("malware", __name__, url_prefix="/malware")

try:
    thresh = 0.5
    label = ["Ramnit", "Lollipop", "Kelihos_ver3", "Vundo", "Simda", "Tracur", "Kelihos_ver1", "Obfuscator.ACY", "Gatak"]
    
    malware_model_path = "./model/malware_cnn"

    malware_model = tf.keras.models.load_model(malware_model_path)
except:
    print("Malware Model Load ERROR!")
    exit(0)

def createGreyScaleImageSpecificWith(binaryData):
    size = len(binaryData)
    if(size < 10240):
        width = 32
    elif(10240 <= size <=10240*3):
        width = 64
    elif(10240*3 <= size <=10240*6):
        width = 128
    elif(10240*6 <= size <=10240*10):
        width = 256
    elif(10240*10 <= size <=10240*20):
        width = 384
    elif(10240*20 <= size <=10240*50):
        width = 512
    elif(10240*50 <= size <=10240*100):
        width = 768
    else:
        width = 1024

    height = int(size/width)+1
    img = Image.new('L',(width,height))
    img.putdata(binaryData)
    img = img.resize((256,256))
    return np.array(img)
    
def detection(img):
    img = tf.expand_dims(img,axis=0)
    prediction = malware_model.predict(img, verbose=0)[0]
    
    max_idx = np.argmax(prediction)
    if(prediction[max_idx] > thresh):
        malware_type = label[max_idx]
    else:
        malware_type = "정상"
    
    prediction = [str(round(pred, 2)) for pred in prediction]
    prediction = ",".join(prediction)
    
    return prediction, malware_type

@blue_malware.route('/', methods=["POST"], strict_slashes=False)
def malware():
    if(request.method=="POST"):
        ip = request.form.get("ip","")
        file = request.files['file']
        
        ipv4 = "^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        
        if(re.match(ipv4, ip) and file):
            try:
                byte_file = file.read()
                    
                new_file = file_table(idx=None, ip=ip, file=byte_file, timestamp=datetime.datetime.now())
                db.session.add(new_file)
                db.session.commit()
                    
                img = createGreyScaleImageSpecificWith(byte_file)
                prediction, malware_type = detection(img)
                
                new_file_detection = file_detection_table(idx=None, detection=prediction, type=malware_type, file_idx=new_file.idx)
                db.session.add(new_file_detection)
                db.session.commit()
                    
                return "success"
            except:
                return "error"
        else:
            return "form data error!"