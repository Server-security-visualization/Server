package com.dca.spring.src.malware;

import com.dca.spring.config.BaseException;
import com.dca.spring.config.BaseResponse;
import com.dca.spring.src.malware.model.*;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import static com.dca.spring.config.BaseResponseStatus.*;

import java.io.IOException;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.lang.*;


@RestController
@RequestMapping("/malware")
public class MalController {
    private final MalProvider malProvider;
    private final MalService malService;

    @Autowired
    public MalController(MalProvider malProvider, MalService malService) {
        this.malProvider = malProvider;
        this.malService = malService;
    }

    /** Malware List 조회
     * [GET]
     * /malware/list
     **/
    @GetMapping("/list")
    public BaseResponse<MalListRes> MalList(){
        try{

            MalListRes malListRes = malProvider.MalListPro();
            return new BaseResponse<>(malListRes);

        } catch(BaseException exception){
            return new BaseResponse<>((exception.getStatus()));
        }
    }

    /** Malware 이미지 조회
     * [GET]
     * /malware/detail/img
     **/
    @GetMapping("/detail/{fileIdx}")
    public byte[] MalDetail(@PathVariable("fileIdx") int fileIdx) throws BaseException, SQLException, IOException {
        try{
            // 파일 인덱스 입력하지 않았을 때
//            if(malDetailReq.getFile_idx()== null){
//                return new BaseResponse<>(MALWARE_EMPTY_FILE_ID);
//            }
//            int fileIdx = Integer.valueOf(malDetailReq.getFile_idx()).intValue();
//            int fileIdx = Integer.parseInt(malDetailReq.getFile_idx());

            byte[] byteImage = malProvider.ChangeBlobImage(fileIdx);
            return byteImage;

        } catch (BaseException | SQLException | IOException e) {
            e.printStackTrace();
        }
        return new byte[0];
    }

    /** Malware CSV 파일 생성
     * [Post]
     * /malware/download
     **/
    @PostMapping("/download")
    public ResponseEntity<String> DownloadCSV(){
        List<MalInfo> malInfoList = malProvider.GetMalInfo();

        HttpHeaders header = new HttpHeaders();
        header.add("Content-Type", "text/csv; charset=MS949");
        header.add("Content-Disposition", "attachment; filename=malware_info.csv");

        String data = "";
        data += "ip, file_name, risk, malware_type, time\n";

        for(int i=0; i<malInfoList.size(); i++){
            data += malInfoList.get(i).getIp()+",";
            data += malInfoList.get(i).getFileName()+",";
            data += malInfoList.get(i).getRisk()+",";
            data += malInfoList.get(i).getMalwareType()+",";
            data += malInfoList.get(i).getTime()+"\n";
        }

        return new ResponseEntity<String>(data, header, HttpStatus.CREATED);
    }
}