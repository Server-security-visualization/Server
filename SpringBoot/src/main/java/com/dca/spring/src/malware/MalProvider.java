package com.dca.spring.src.malware;

import com.dca.spring.config.BaseException;
import com.dca.spring.src.malware.model.MalListRes;
import com.dca.spring.src.malware.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.List;
import java.lang.*;

import static com.dca.spring.config.BaseResponseStatus.*;

@Service
public class MalProvider {
    private final MalService malService;
    private final MalDao malDao;

    @Autowired
    public MalProvider(MalService malService, MalDao malDao) {
        this.malService = malService;
        this.malDao = malDao;
    }

    /** Malware List 조회 **/
    @Transactional
    public MalListRes MalListPro() throws BaseException {
        try{
            List<MalList> malList = malDao.MalListDao();
            return new MalListRes(malList);
        }catch (Exception exception){
            throw new BaseException(DATABASE_ERROR);
        }
    }

    /** Malware 상세보기 **/
//    @Transactional
//    public MalDetailRes MalDetailPro(int fileIdx) throws BaseException {
//        try{
//            MalDetailRes malDetailRes = malDao.MalDetailDao(fileIdx);
//
//            // Blob 이미지 base64로 인코딩 (url로 변환)
//            Blob blobImage = malDao.MalBlobImage(fileIdx);
//            String imageUrl = ChangeBlobImage(blobImage);
//            malDetailRes.setImageUrl(imageUrl);
//
//            return malDetailRes;
//        }catch (Exception exception){
//            throw new BaseException(DATABASE_ERROR);
//        }
//    }

    /** Blob 이미지 base64로 인코딩 **/
    @Transactional
    public String ChangeBlobImage(int fileIdx) throws BaseException, SQLException, IOException {
        Blob blobImage = malDao.MalBlobImage(fileIdx);
        String imageUrl = malService.encodeBlobToBase64(blobImage);
        return imageUrl;
    }
}
