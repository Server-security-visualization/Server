package com.dca.spring.src.malware;

import com.dca.spring.config.BaseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.dca.spring.src.malware.model.*;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Base64Utils;

//import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Base64;

import static com.dca.spring.config.BaseResponseStatus.*;

@Service
public class MalService {
    final Logger logger = LoggerFactory.getLogger(this.getClass());

    private final MalDao malDao;

    @Autowired
    public MalService(MalDao malDao) {
        this.malDao = malDao;
    }

    /** blob 이미지 base64 인코딩 **/
    @Transactional
    public String encodeBlobToBase64(Blob blobImage) throws SQLException, IOException {
        InputStream inputStream = blobImage.getBinaryStream();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        byte[] buffer = new byte[4096];
        int bytesRead = -1;

        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead);
        }

        byte[] imageBytes = outputStream.toByteArray();
        String base64Image = "data:image/png;base64," + Base64.getEncoder().encodeToString(imageBytes);

        inputStream.close();
        outputStream.close();

        return base64Image;
    }

    /** blob 이미지 byte 변환 **/
    public byte[] convertBlobToByteArray(Blob blob) throws IOException, SQLException {
        try (InputStream inputStream = blob.getBinaryStream();
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }

            return outputStream.toByteArray();
        } catch (SQLException | IOException e) {
            throw e;
        }
    }

}
