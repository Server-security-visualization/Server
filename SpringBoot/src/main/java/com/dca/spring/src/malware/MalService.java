package com.dca.spring.src.malware;

import com.dca.spring.config.BaseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.dca.spring.src.malware.model.*;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Base64Utils;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Base64;

import static com.dca.spring.config.BaseResponseStatus.*;

@Service
public class MalService {
    final Logger logger = LoggerFactory.getLogger(this.getClass());

    private final MalDao malDao;

    @Autowired
    public MalService(MalDao malDao) {
        this.malDao = malDao;
    }

    /** blob 데이터를 byte로 변환 **/
    @Transactional
    public byte[] blobToByte(Blob blobImage){
        BufferedInputStream is = null;
        byte[] bytes = null;
        try{
            is = new BufferedInputStream(blobImage.getBinaryStream());
            bytes = new byte[(int) blobImage.length()];
            int len = bytes.length;
            int offset = 0;
            int read = 0;

            while(offset < len
                    && (read = is.read(bytes, offset, len - offset)) >= 0)
                offset += read;
        } catch (Exception e){
            e.printStackTrace();
        }
        return bytes;
    }

    /** byte를 base64로 인코딩 **/
    @Transactional
    public String byteToBase64(byte[] bytes){
        String result = "";
        try{
            result = Base64Utils.encodeToString(bytes);
        } catch (Exception e){
            e.printStackTrace();
        }
        return result;
    }

    /** blob 이미지 base64 인코딩 **/
    @Transactional
    public String encodeBlobToBase64(Blob blobImage) throws SQLException, IOException {
        InputStream inputStream = blobImage.getBinaryStream();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        byte[] buffer = new byte[4096];
        int bytesRead = -1;

        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead);
        }

        byte[] imageBytes = outputStream.toByteArray();
        String base64Image = Base64.getEncoder().encodeToString(imageBytes);

        inputStream.close();
        outputStream.close();

        return base64Image;
    }

    /** blob 이미지 data url로 변환 **/
    @Transactional
    public String changeImageType(Blob blobImage) throws BaseException {
        try{
            // blob 데이터를 byte로 변환
            byte bytes[] = blobToByte(blobImage);

            // byte를 base64로 인코딩
            String base64Encode = "";
            if(bytes.length > 0 && bytes != null) {
                base64Encode = byteToBase64(bytes);
                base64Encode = "data:image/png;base64," + base64Encode;
            }

            return base64Encode;
        }catch (Exception exception){
            throw new BaseException(MALWARE_CHANGEIMAGE_TYPE_ERROR);
        }
    }
}
